openapi: 3.0.0
info:
  title: Pension Administration API
  version: 3.0.0
paths: 
  /customers:
    get: #TODO add example
      tags:
        - Customers
      summary: List all customers
      description: >
        This operation lists all active customers. 
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/itemsPerPage'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound' 

    post: #TODO add example
      tags:
        - Customers
      summary: Create a customer
      description: >
        This operation creates a new customer record and returns the newly created record
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              sample:
                $ref: '#/components/examples/CustomerInput'
              
      responses: 
        201:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                sample:
                  $ref: '#/components/examples/Customer'
        400:
          $ref: '#/components/responses/Invalid'
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound' 
    

  /customers/{id}:
    parameters:
        - $ref: '#/components/parameters/customerId'
    get:
      tags:
        - Customers
      summary: Retrieve a customer
      operationId: getCustomer
      description: >
        This operation returns details of a customer
      
      responses: 
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                sample:
                  $ref: '#/components/examples/Customer'

        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound'

    patch: #TODO add example
      tags:
        - Customers
      summary: Update a customer
      operationId: getCustomer
      description: >
        This operation updates fields on the customer record. 
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              sample:
                $ref: '#/components/examples/CustomerInput' #TODO: update to partial
      responses:        
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                sample:
                  $ref: '#/components/examples/Customer'
        400:
          $ref: '#/components/responses/Invalid'          
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Customers
      summary: Cancel customer account
      operationId: cancelCustomer
      description: >
        This operation will close a customers account and generate an Expectation
        for a refund if the account is within the 30 day cancellation period and has non-zero balance.
        If the account is older than 30 days then an Outbound Transfer should 
        be created.
      responses: 
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                sample:
                  $ref: '#/components/examples/Customer'
        400:
          $ref: '#/components/responses/Invalid'
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound'

  /payments:
    get:
      tags:
        - Payments
      summary: List all payments
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/itemsPerPage'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound' 
          
    post:
      tags:
        - Payments
      summary: Create a payment
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
            examples:
              sample:
                $ref: '#/components/examples/CustomerInput'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Payment/properties/id'
        400:
          $ref: '#/components/responses/Invalid'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound' 
    
  /payments/{id}:
    get:
      tags:
        - Payments
      summary: Retrieve a payment
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/itemsPerPage'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound' 

    delete:
      tags:
        - Payments
      summary: Cancel a payment
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/itemsPerPage'
      responses:
        200:
          description: OK
        400:
          $ref: '#/components/responses/Invalid'
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound' 


  /inboundTransfers:
    get:
      tags:
        - Inbound Transfers
      summary: List all inbound transfers
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/itemsPerPage'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound' 
    post:
      tags:
        - Inbound Transfers
      summary: Create an inbound transfer
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Transfer/properties/id'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound' 


  /inboundTransfers/{id}:
    get:
      tags:
        - Inbound Transfers
      summary: Retrieve an inbound transfer
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Transfer'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound' 

    delete:
      tags:
        - Inbound Transfers
      summary: Cancel an inbound transfer
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        201:
          description: Cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Transfer/properties/id'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound' 

  /outboundTransfers:
    post:
      tags:
        - Outbound Transfers
      summary: Create an outbound transfer
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Transfer/properties/id'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound' 
    get:
      tags:
        - Outbound Transfers
      summary: List transfers
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/itemsPerPage'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound' 
    
  /outboundTransfers/{id}:
    get:
      tags:
        - Outbound Transfers
      summary: Retrieve an inbound transfer
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Transfer'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound' 
    delete:
      tags:
        - Outbound Transfers
      summary: Cancel an inbound transfer
      requestBody:
        required: true
        description: "test"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transfer'
      responses:
        201:
          description: Cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Transfer/properties/id'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound' 

  /expectations:
    get:
      tags:
        - Expectations
      summary: List all expectations
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/itemsPerPage'
      responses:
        200:
          description: OK
        401:
          $ref: '#/components/responses/Unauthorized'   # <-----
        404:
          $ref: '#/components/responses/NotFound' 


  
  /tracing:
    get:
      tags:
        - Pension Tracing
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Payment/properties/id'

  /customers/{id}/valuations:
    put:
      tags:
        - Valuations
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        201:
          description: Insert or update valuations
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Payment/properties/id'
  /customers/{id}/beneficiaries:
    get:
      tags:
        - Beneficiaries
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Payment/properties/id'
    put:
      tags:
        - Beneficiaries
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Payment/properties/id'

  /customers/{id}/documents:
    get:
      tags:
        - Documents
      parameters:
        - $ref: '#/components/parameters/customerId'
      responses:
        200:
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    $ref: '#/components/schemas/Payment/properties/id'


components:
  schemas:
    Customer:
      type: object
      required:
        - title
        - firstName
        - lastName
        - dateOfBirth
        - email
        - phoneNumber
        - gender
        - citizenship
        - nationalInsuranceNumber
        - employmentStatus
        - address
      properties:
        id:
          type: string
          readOnly: true
        createdAt:
          $ref: '#/components/schemas/timestamp'
          readOnly: true
        updatedAt:
          $ref: '#/components/schemas/timestamp'
          readOnly: true
        deactivatedAt:
          $ref: '#/components/schemas/timestamp'
          readOnly: true
        penId:
          type: string
          readOnly: true
        email:
          type: string
        title:
          type: string
          enum:
            - Captain
            - Dr
            - Lady
            - Lieutenant
            - LieutenantCommander
            - Lord
            - Major
            - Master
            - Miss
            - Mr
            - Mrs
            - Ms
            - Mx
            - Professor
            - Reverend
            - Sir
            - WingCommander
        firstName:
          type: string
          example: "John"
        middleName:
          type: string
        lastName:
          type: string
          example: "Doe"
        phoneNumber:
          type: string
        dateOfBirth:
          $ref: '#/components/schemas/date'
        latestValuation:
          type: integer
          readOnly: true
          format: int32
        termsAcceptedAt:
          $ref: '#/components/schemas/timestamp'
        employmentStatus:
          type: string
          enum:
            - CareOver16
            - CareUnder16s
            - Child
            - Education
            - Employed
            - Other
            - Retired
            - SelfEmployed
            - Unemployed
            - Director
        countryOfBirth: #TODO need to add countries we accept here
          type: string
        citizenship:
          description: add valid countries here
          type: string
        gender:
          type: string
          enum:
            - Male
            - Female
        address:
          $ref: '#/components/schemas/Address'
        nationalInsuranceNumber: #add regex here
          type: string
    TaxResidency:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - currentYearResidencyStatus
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        user:
          $ref: '#/components/schemas/Customer'
        currentYearResidencyStatus:
          type: string
          enum:
            - ScotResident
            - OtherUKResident
        nextYearForecastResidencyStatus:
          type: string
          enum:
            - ScotResident
            - OtherUKResident
    Fund:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - ISIN
        - name
        - description
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        externalName:
          type: string
        group:
          type: string
          enum:
            - Basic
            - Advanced
            - Impact
            - Sustainable
            - Shariah
        ISIN:
          type: string
        factSheet:
          type: string
        name:
          type: string
        description:
          type: string
        equity:
          type: integer
          format: int32
    Company:
      type: object
      required:
        - id
        - ownershipVerified
      properties:
        id:
          type: string
        number:
          type: string
        companiesHouseData:
          type: string
        ownershipVerified:
          type: boolean
        companyCategory:
          type: string
        companySubCategory:
          type: string
    Address:
      type: object
      required:
        - id
        - line1
        - postcode
        - country
      properties:
        id:
          type: string
          readOnly: true
        streetNumber:
          type: string
        line1:
          type: string
        line2:
          type: string
        town:
          type: string
        county:
          type: string
        postcode:
          type: string
        country:
          type: string


    Transfer:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - provider
        - policyNumber
        - estimatedAmount
        - previousStatuses
        - status
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        provider:
          type: string
        pensionProvider:
          $ref: '#/components/schemas/PensionProvider'
        policyNumber:
          type: string
        policyNumberRegexIgnored:
          type: boolean
        customerNumber:
          type: string
        estimatedValue:
          type: integer
          format: int32
        previousStatuses:
          type: array
          items:
            type: string
            enum:
              - Requested
              - NewTransfer
              - FundsSent
              - Complete
              - Cancelled
              - OnHold
              - SubmittedToOrigo
              - NeedsRequestingOnOrigo
              - Duplicate
              - NeedsReview
              - NonOrigoInProgress
              - PaymentAllocated
              - Rejected
        status:
          type: string
          enum:
            - Requested
            - NewTransfer
            - FundsSent
            - Complete
            - Cancelled
            - OnHold
            - SubmittedToOrigo
            - NeedsRequestingOnOrigo
            - Duplicate
            - NeedsReview
            - NonOrigoInProgress
            - PaymentAllocated
            - Rejected
        statusUpdatedAt:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        reference:
          type: string
        referenceNumber:
          type: integer
          format: int32
        finalValue:
          type: number
          format: float
        rejectionReason:
          type: string
          enum:
            - AlreadyTransferred
            - AddressIncorrect
            - NameIncorrect
            - NinoIncorrect
            - PolicyNumberIncorrect
            - NotFound
            - StillContributing
            - ProviderContactedCustomer
            - UnusualReason
        rejectionCustomerResponded:
          type: boolean
        payment:
          $ref: '#/components/schemas/Payment'
    Refund:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - penceAmount
        - reason
        - payment
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        penceAmount:
          type: integer
          format: int32
        reason:
          type: string
        payment:
          $ref: '#/components/schemas/Payment'
        customer:
          $ref: '#/components/schemas/Customer'
    Payment:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - value
        - source
        - completedDate
        - expectation
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        deletedAt:
          type: string
        completedDate:
          type: string
        value:
          type: integer
          format: int32
        source:
          type: string
          enum:
            - TaxReclaim
            - Referral
            - Business
            - Personal
            - Redress
            - Transfer
        customer:
          $ref: '#/components/schemas/Customer'
    Expectation:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - createdDate
        - contributionStatus
        - penceAmount
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        createdDate:
          type: string
        secclTransactionId:
          type: string
        secclTransactionLinkId:
          type: string
        contributionFrequency:
          type: string
          enum:
            - OneOff
            - Monthly
        contributionSource:
          type: string
          enum:
            - TaxReclaim
            - Referral
            - Business
            - Personal
            - Redress
            - Transfer
        contributionStatus:
          type: string
          enum:
            - Cancelled
            - NotSubmitted
            - Pending
            - Completed
            - Deleted
        paymentMethod:
          type: string
          enum:
            - BankTransfer
            - DirectDebit
            - GoCardless
            - StandingOrder
            - InstantPayment
        penceAmount:
          type: integer
          format: int32
        linkedPayment:
          $ref: '#/components/schemas/Payment'
        customer:
          $ref: '#/components/schemas/Customer'
    PensionProvider:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - address
        - origo
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        origo:
          type: boolean
        email:
          type: string
    TracingUrlRecord:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - recordId
        - order
        - docType
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        recordId:
          type: integer
          format: int32
        order:
          type: integer
          format: int32
        docType:
          type: string
          enum:
            - None
            - Invalid
            - Employer
            - NotFound
            - Deleted
        error:
          type: string
        employer:
          $ref: '#/components/schemas/TracingEmployer'
        normalizedName:
          type: string
        schemeCount:
          type: integer
          format: int32
    TracingEmployer:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - normalizedName
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        urlRecords:
          type: array
          items:
            $ref: '#/components/schemas/TracingUrlRecord'
        recordCount:
          type: integer
          format: int32
        schemeCount:
          type: integer
          format: int32
        name:
          type: string
        normalizedName:
          type: string 
        schemes:
          type: array
          items:
            $ref: '#/components/schemas/TracingScheme'
    TracingScheme:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - archived
      properties:
        id:
          type: string
        hash:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        name:
          type: string
        previousNames:
          type: array
          items:
            type: string
        archived:
          type: boolean
        address:
          $ref: '#/components/schemas/TracingAddress'
        employers:
          type: array
          items:
            $ref: '#/components/schemas/TracingEmployer'
    TracingAddress:
      type: object
      required:
        - id
        - createdAt
        - updatedAt
        - hash
      properties:
        id:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        hash:
          type: string
        address1:
          type: string
        address2:
          type: string
        address3:
          type: string
        address4:
          type: string
        postcode:
          type: string
        country:
          type: string
        phone:
          type: string
        provider:
          $ref: '#/components/schemas/PensionProvider'
        schemeCount:
          type: integer
          format: int32
        schemes:
          type: array
          items:
            $ref: '#/components/schemas/TracingScheme'
    TracingInvalidName:
      type: object
      required:
        - id
        - name
        - normalizedName
      properties:
        id:
          type: string
        name:
          type: string
        normalizedName:
          type: string
        reason:
          type: string
    Beneficiary:
      type: object
      required:
        - id
        - dateSubmitted
        - user
        - firstName
        - lastName
        - relationship
        - address
        - percentage
      properties:
        id:
          type: string
        dateSubmitted:
          type: string
        user:
          $ref: '#/components/schemas/Customer'
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        relationship:
          type: string
          enum:
            - Other
            - Wife
            - Husband
            - Partner
            - Son
            - Daughter
            - Mother
            - Father
        address:
          $ref: '#/components/schemas/Address'
        percentage:
          type: integer
          format: int32
        notes:
          type: string

    timestamp:
      example: 1995-09-07T10:40:52Z
      format: date-time
      type: string
    date:
      example: 1995-09-07
      format: date
      type: string

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  

  parameters:
    customerId: 
      in: query
      name: id
      required: true
      schema:
        type: string
      description: Customer ID
    pageNumber: 
      in: query
      name: pageNumber
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
      description: Page number
    itemsPerPage:
      in: query
      name: perPage
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 100
      description: The numbers of items to return per page.

  responses:
    Invalid:
      description: The request was invalid, often due to missing a required parameter.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  examples:

    defaultFields:
      value:
        id: 123
        createdAt: 
          $ref: '#/components/schemas/timestamp/example'
        updatedAt:
          $ref: '#/components/schemas/timestamp/example'


    CustomerInput:
      value:
        title: Mr
        firstName: Stuart
        lastName: Robinson
        dateOfBirth: 1983-10-13
        email: stuart@stuart.cloud
        phoneNumber: '06128527894'
        gender: Male
        citizenship: UK
        nationalInsuranceNumber: JH771270C
        employmentStatus: Employed
        address:
          streetNumber: 1    
          line1: Long Lane
          postcode: SE1 4PG
          country: UK
        
    Customer:
      value:
        id: 123
        createdAt: 1995-09-07T10:40:52Z
        updatedAt: 1995-09-07T10:40:52Z
        title: Mr
        firstName: Stuart
        lastName: Robinson
        dateOfBirth: 1983-10-13
        email: stuart@stuart.cloud
        phoneNumber: '06128527894'
        gender: Male
        citizenship: UK
        nationalInsuranceNumber: JH771270C
        employmentStatus: Employed
        address:
          streetNumber: 1    
          line1: Long Lane
          postcode: SE1 4PG
          country: UK
        penId: PEN123

    AddressInput:
      value:
        streetNumber: 1    
        line1: Long Lane
        postcode: SE1 4PG
        country: UK

    Address:
      value:
        allOf: 
          - $ref: '#/components/examples/defaultFields'
          - $ref: '#/components/examples/AddressInput'


    
  
